# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Union, Optional
from typing_extensions import Literal, Required, Annotated, TypeAlias, TypedDict

from ..._types import SequenceNotStr
from ..._utils import PropertyInfo

__all__ = [
    "InferencePipelineCreateParams",
    "DataBackend",
    "DataBackendUnionMember0",
    "DataBackendUnionMember0Config",
    "DataBackendBackendType",
    "DataBackendUnionMember2",
    "DataBackendUnionMember2Config",
    "DataBackendUnionMember3",
    "DataBackendUnionMember3Config",
    "DataBackendUnionMember4",
    "DataBackendUnionMember4Config",
    "DataBackendUnionMember5",
    "DataBackendUnionMember5Config",
    "Project",
    "Workspace",
]


class InferencePipelineCreateParams(TypedDict, total=False):
    description: Required[Optional[str]]
    """The inference pipeline description."""

    name: Required[str]
    """The inference pipeline name."""

    data_backend: Annotated[Optional[DataBackend], PropertyInfo(alias="dataBackend")]

    project: Optional[Project]

    workspace: Optional[Workspace]


class DataBackendUnionMember0Config(TypedDict, total=False):
    ground_truth_column_name: Annotated[Optional[str], PropertyInfo(alias="groundTruthColumnName")]
    """Name of the column with the ground truths."""

    human_feedback_column_name: Annotated[Optional[str], PropertyInfo(alias="humanFeedbackColumnName")]
    """Name of the column with human feedback."""

    inference_id_column_name: Annotated[Optional[str], PropertyInfo(alias="inferenceIdColumnName")]
    """Name of the column with the inference ids.

    This is useful if you want to update rows at a later point in time. If not
    provided, a unique id is generated by Openlayer.
    """

    latency_column_name: Annotated[Optional[str], PropertyInfo(alias="latencyColumnName")]
    """Name of the column with the latencies."""

    timestamp_column_name: Annotated[Optional[str], PropertyInfo(alias="timestampColumnName")]
    """Name of the column with the timestamps.

    Timestamps must be in UNIX sec format. If not provided, the upload timestamp is
    used.
    """


class DataBackendUnionMember0(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["bigquery"], PropertyInfo(alias="backendType")]]

    bigquery_connection_id: Required[Annotated[Optional[str], PropertyInfo(alias="bigqueryConnectionId")]]

    config: Required[DataBackendUnionMember0Config]

    dataset_id: Required[Annotated[str, PropertyInfo(alias="datasetId")]]

    project_id: Required[Annotated[str, PropertyInfo(alias="projectId")]]

    table_id: Required[Annotated[Optional[str], PropertyInfo(alias="tableId")]]

    partition_type: Annotated[Optional[Literal["DAY", "MONTH", "YEAR"]], PropertyInfo(alias="partitionType")]


class DataBackendBackendType(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["default"], PropertyInfo(alias="backendType")]]


class DataBackendUnionMember2Config(TypedDict, total=False):
    ground_truth_column_name: Annotated[Optional[str], PropertyInfo(alias="groundTruthColumnName")]
    """Name of the column with the ground truths."""

    human_feedback_column_name: Annotated[Optional[str], PropertyInfo(alias="humanFeedbackColumnName")]
    """Name of the column with human feedback."""

    inference_id_column_name: Annotated[Optional[str], PropertyInfo(alias="inferenceIdColumnName")]
    """Name of the column with the inference ids.

    This is useful if you want to update rows at a later point in time. If not
    provided, a unique id is generated by Openlayer.
    """

    latency_column_name: Annotated[Optional[str], PropertyInfo(alias="latencyColumnName")]
    """Name of the column with the latencies."""

    timestamp_column_name: Annotated[Optional[str], PropertyInfo(alias="timestampColumnName")]
    """Name of the column with the timestamps.

    Timestamps must be in UNIX sec format. If not provided, the upload timestamp is
    used.
    """


class DataBackendUnionMember2(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["snowflake"], PropertyInfo(alias="backendType")]]

    config: Required[DataBackendUnionMember2Config]

    database: Required[str]

    schema: Required[str]

    snowflake_connection_id: Required[Annotated[Optional[str], PropertyInfo(alias="snowflakeConnectionId")]]

    table: Required[Optional[str]]


class DataBackendUnionMember3Config(TypedDict, total=False):
    ground_truth_column_name: Annotated[Optional[str], PropertyInfo(alias="groundTruthColumnName")]
    """Name of the column with the ground truths."""

    human_feedback_column_name: Annotated[Optional[str], PropertyInfo(alias="humanFeedbackColumnName")]
    """Name of the column with human feedback."""

    inference_id_column_name: Annotated[Optional[str], PropertyInfo(alias="inferenceIdColumnName")]
    """Name of the column with the inference ids.

    This is useful if you want to update rows at a later point in time. If not
    provided, a unique id is generated by Openlayer.
    """

    latency_column_name: Annotated[Optional[str], PropertyInfo(alias="latencyColumnName")]
    """Name of the column with the latencies."""

    timestamp_column_name: Annotated[Optional[str], PropertyInfo(alias="timestampColumnName")]
    """Name of the column with the timestamps.

    Timestamps must be in UNIX sec format. If not provided, the upload timestamp is
    used.
    """


class DataBackendUnionMember3(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["databricks_dtl"], PropertyInfo(alias="backendType")]]

    config: Required[DataBackendUnionMember3Config]

    databricks_dtl_connection_id: Required[Annotated[Optional[str], PropertyInfo(alias="databricksDtlConnectionId")]]

    table_id: Required[Annotated[Optional[str], PropertyInfo(alias="tableId")]]


class DataBackendUnionMember4Config(TypedDict, total=False):
    ground_truth_column_name: Annotated[Optional[str], PropertyInfo(alias="groundTruthColumnName")]
    """Name of the column with the ground truths."""

    human_feedback_column_name: Annotated[Optional[str], PropertyInfo(alias="humanFeedbackColumnName")]
    """Name of the column with human feedback."""

    inference_id_column_name: Annotated[Optional[str], PropertyInfo(alias="inferenceIdColumnName")]
    """Name of the column with the inference ids.

    This is useful if you want to update rows at a later point in time. If not
    provided, a unique id is generated by Openlayer.
    """

    latency_column_name: Annotated[Optional[str], PropertyInfo(alias="latencyColumnName")]
    """Name of the column with the latencies."""

    timestamp_column_name: Annotated[Optional[str], PropertyInfo(alias="timestampColumnName")]
    """Name of the column with the timestamps.

    Timestamps must be in UNIX sec format. If not provided, the upload timestamp is
    used.
    """


class DataBackendUnionMember4(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["redshift"], PropertyInfo(alias="backendType")]]

    config: Required[DataBackendUnionMember4Config]

    redshift_connection_id: Required[Annotated[Optional[str], PropertyInfo(alias="redshiftConnectionId")]]

    schema_name: Required[Annotated[str, PropertyInfo(alias="schemaName")]]

    table_name: Required[Annotated[str, PropertyInfo(alias="tableName")]]


class DataBackendUnionMember5Config(TypedDict, total=False):
    ground_truth_column_name: Annotated[Optional[str], PropertyInfo(alias="groundTruthColumnName")]
    """Name of the column with the ground truths."""

    human_feedback_column_name: Annotated[Optional[str], PropertyInfo(alias="humanFeedbackColumnName")]
    """Name of the column with human feedback."""

    inference_id_column_name: Annotated[Optional[str], PropertyInfo(alias="inferenceIdColumnName")]
    """Name of the column with the inference ids.

    This is useful if you want to update rows at a later point in time. If not
    provided, a unique id is generated by Openlayer.
    """

    latency_column_name: Annotated[Optional[str], PropertyInfo(alias="latencyColumnName")]
    """Name of the column with the latencies."""

    timestamp_column_name: Annotated[Optional[str], PropertyInfo(alias="timestampColumnName")]
    """Name of the column with the timestamps.

    Timestamps must be in UNIX sec format. If not provided, the upload timestamp is
    used.
    """


class DataBackendUnionMember5(TypedDict, total=False):
    backend_type: Required[Annotated[Literal["postgres"], PropertyInfo(alias="backendType")]]

    config: Required[DataBackendUnionMember5Config]

    database: Required[str]

    postgres_connection_id: Required[Annotated[Optional[str], PropertyInfo(alias="postgresConnectionId")]]

    schema: Required[str]

    table: Required[Optional[str]]


DataBackend: TypeAlias = Union[
    DataBackendUnionMember0,
    DataBackendBackendType,
    DataBackendUnionMember2,
    DataBackendUnionMember3,
    DataBackendUnionMember4,
    DataBackendUnionMember5,
]


class Project(TypedDict, total=False):
    name: Required[str]
    """The project name."""

    task_type: Required[
        Annotated[
            Literal["llm-base", "tabular-classification", "tabular-regression", "text-classification"],
            PropertyInfo(alias="taskType"),
        ]
    ]
    """The task type of the project."""

    description: Optional[str]
    """The project description."""


class Workspace(TypedDict, total=False):
    name: Required[str]
    """The workspace name."""

    slug: Required[str]
    """The workspace slug."""

    invite_code: Annotated[str, PropertyInfo(alias="inviteCode")]
    """The workspace invite code."""

    saml_only_access: Annotated[bool, PropertyInfo(alias="samlOnlyAccess")]
    """Whether the workspace only allows SAML authentication."""

    wildcard_domains: Annotated[SequenceNotStr[str], PropertyInfo(alias="wildcardDomains")]
